protein = "MANLHACQENAQEDECYFWTACIRQFNKYYMIVITLADQEPAPYLKYWDDMYKAEVYEISADRFRKARNAECEVDTHTVQSLNDNFSDLRVQVWPCGTQGFTCDTDKQGGFSHITEEEGHDQRYVGTWCQHRGDLWMQFCRQTWRGVNQGPKQCKCTSGRSKCPPDGVRDSIGISAQWQFFPTFHHGSRVERAIWWPSSMRAIYEPCICIVKMHDSYTVAAHWTDTLNWNWWISQNQLYTGHSHWTNFRKHISNLPFDHSDFIGATCWTTSCHHHPVTEESDAKKCSCQKPVIHMEAYAIEIFTNIDIEVSIFCFKIHPNGFHWVYHGVEGLTPWVRHDEDHYGLGMKNYMGICENETCEHRHLVQPLLPVYDLETIYVQYNEVQFWAQWGSDGRNAYWPNWWFYERTCNEVKRIHKHPAKFNPFIEGGFAWMVCADGPGIVQTCCPWMWLLNRMNRITHQEQFIPGPMNIWNKMTQGETPCHTHLGRVGAPDCSYKSFERDTTNNHQKHNYWSVLHSMQFQSRYGWMKCFFFHTGQEREDCGIMIQQGCVSYYLLETWDCEWYPLNGRDNNAKTFLLIIRKAVCQLYKLYVRQTFSCMTMDIWVKMLPCIWYLKYHFNMCRQREVAGTEFPWPMFVLHVYARCWTKNFYFICHHLEVLDWNEPNKREIAKPTHLRLTNGRVYSRGGTNTGFWTWLKWRGGMLEMEWRGDKSAELLFRYRGHDDSFEWTLIWMTDRDPPSMRACRKIDDAGGTQFKHCVDMKMAAKEPMWQNDLRHPGVCPYNEGANAQWWWWMTRKCMECASVQQGQEFQMFVVPSLYFVQHCPWSDHALPCWACICLGPCALVACAYAIPVVDCNGDHVNEPKGYLGLCVCTNDCQMPGFESSNPTVMGEHPRHPWMDCVEMNCYPDTTDETTWEDEPQHWEEQETYVHCLWFIRTYKPMQLRQECPHRDDGAFAAHQTNFDSWWFGACDTRTMHSEPPECLFHFQHCVSSRVKYNW"
rna_codon_table ={'UUU': 'F','CUU': 'L','AUU': 'I','GUU': 'V', 'UUC': 'F','CUC': 'L','AUC': 'I','GUC': 'V', 'UUA': 'L','CUA': 'L','AUA': 'I','GUA': 'V', 'UUG': 'L','CUG': 'L','AUG': 'M','GUG': 'V', 'UCU': 'S','CCU': 'P','ACU': 'T','GCU': 'A', 'UCC': 'S','CCC': 'P','ACC': 'T','GCC': 'A', 'UCA': 'S','CCA': 'P','ACA': 'T','GCA': 'A', 'UCG': 'S','CCG': 'P','ACG': 'T','GCG': 'A', 'UAU': 'Y','CAU': 'H','AAU': 'N','GAU': 'D', 'UAC': 'Y','CAC': 'H','AAC': 'N','GAC': 'D', 'UAA': 'Stop','CAA': 'Q','AAA': 'K','GAA': 'E', 'UAG': 'Stop','CAG': 'Q','AAG': 'K','GAG': 'E', 'UGU': 'C','CGU': 'R','AGU': 'S','GGU': 'G', 'UGC': 'C','CGC': 'R','AGC': 'S','GGC': 'G', 'UGA': 'Stop','CGA': 'R','AGA': 'R','GGA': 'G', 'UGG': 'W','CGG': 'R','AGG': 'R','GGG': 'G'}

final_combination = 0

def combinatoric_protein_finder(protein_sample, final_combination):
    single_protein_combination = 0
    for key, value in rna_codon_table.items():
        if value == protein_sample:
            single_protein_combination += 1
    
    print protein_sample, single_protein_combination

    if final_combination ==0:
        final_combination += single_protein_combination
    else:
        final_combination *= single_protein_combination
    
    return final_combination


for i in range(len(protein)) :
    final_combination = combinatoric_protein_finder(protein[i], final_combination)

final_combination = combinatoric_protein_finder('Stop', final_combination)

print final_combination % 1000000